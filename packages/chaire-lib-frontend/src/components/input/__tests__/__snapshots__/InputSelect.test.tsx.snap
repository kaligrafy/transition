// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`All props 1`] = `
{
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      <select
        autocomplete="none"
        class="tr__form-input-select apptr__input _input-select"
        id="SelectWidgetId"
        name="SelectWidgetId"
        style="overflow: hidden; white-space: nowrap; text-overflow: ellipsis;"
      >
        <option
          value="test1"
        >
          something:test1
        </option>
        <option
          value="test2"
        >
          label for test2
        </option>
        <option
          disabled=""
          value="disabled"
        >
          something:disabled
        </option>
        <optgroup
          label="something:has sub-choices"
        >
          <option
            value="subChoice1"
          >
            something:subChoice1
          </option>
          <option
            value="subChoice2"
          >
            label for subchoice2
          </option>
        </optgroup>
      </select>
    </div>
  </body>,
  "container": <div>
    <select
      autocomplete="none"
      class="tr__form-input-select apptr__input _input-select"
      id="SelectWidgetId"
      name="SelectWidgetId"
      style="overflow: hidden; white-space: nowrap; text-overflow: ellipsis;"
    >
      <option
        value="test1"
      >
        something:test1
      </option>
      <option
        value="test2"
      >
        label for test2
      </option>
      <option
        disabled=""
        value="disabled"
      >
        something:disabled
      </option>
      <optgroup
        label="something:has sub-choices"
      >
        <option
          value="subChoice1"
        >
          something:subChoice1
        </option>
        <option
          value="subChoice2"
        >
          label for subchoice2
        </option>
      </optgroup>
    </select>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;

exports[`Default props 1`] = `
{
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      <select
        autocomplete="none"
        class="tr__form-input-select apptr__input _input-select"
        id="SelectWidgetId"
        name="SelectWidgetId"
        style="overflow: hidden; white-space: nowrap; text-overflow: ellipsis;"
      >
        <option
          value=""
        />
      </select>
    </div>
  </body>,
  "container": <div>
    <select
      autocomplete="none"
      class="tr__form-input-select apptr__input _input-select"
      id="SelectWidgetId"
      name="SelectWidgetId"
      style="overflow: hidden; white-space: nowrap; text-overflow: ellipsis;"
    >
      <option
        value=""
      />
    </select>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;

exports[`Disabled 1`] = `
{
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      <select
        autocomplete="none"
        class="tr__form-input-select apptr__input _input-select"
        disabled=""
        id="SelectWidgetId"
        name="SelectWidgetId"
        style="overflow: hidden; white-space: nowrap; text-overflow: ellipsis;"
      >
        <option
          value=""
        />
      </select>
    </div>
  </body>,
  "container": <div>
    <select
      autocomplete="none"
      class="tr__form-input-select apptr__input _input-select"
      disabled=""
      id="SelectWidgetId"
      name="SelectWidgetId"
      style="overflow: hidden; white-space: nowrap; text-overflow: ellipsis;"
    >
      <option
        value=""
      />
    </select>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;

exports[`With blank choice 1`] = `
{
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      <select
        autocomplete="none"
        class="tr__form-input-select apptr__input _input-select"
        id="SelectWidgetId"
        name="SelectWidgetId"
        style="overflow: hidden; white-space: nowrap; text-overflow: ellipsis;"
      >
        <option
          value=""
        />
        <option
          value="test1"
        />
        <option
          value="test2"
        >
          label for test2
        </option>
        <option
          disabled=""
          value="disabled"
        />
        <optgroup
          label=""
        >
          <option
            value="subChoice1"
          />
          <option
            value="subChoice2"
          >
            label for subchoice2
          </option>
        </optgroup>
      </select>
    </div>
  </body>,
  "container": <div>
    <select
      autocomplete="none"
      class="tr__form-input-select apptr__input _input-select"
      id="SelectWidgetId"
      name="SelectWidgetId"
      style="overflow: hidden; white-space: nowrap; text-overflow: ellipsis;"
    >
      <option
        value=""
      />
      <option
        value="test1"
      />
      <option
        value="test2"
      >
        label for test2
      </option>
      <option
        disabled=""
        value="disabled"
      />
      <optgroup
        label=""
      >
        <option
          value="subChoice1"
        />
        <option
          value="subChoice2"
        >
          label for subchoice2
        </option>
      </optgroup>
    </select>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;
